import path from "node:path"
import type { VueQuery } from "@vitejs/plugin-vue"
import type { SFCBlock } from "vue/compiler-sfc"

import { createConsola } from "consola"
import {
  parseVueRequest as _parseVueRequest
} from "@vitejs/plugin-vue"
import { camelize, capitalize } from "@vue/shared"

export interface PluginConfig {
  output: string
  sourceDir: string
  blockType: string
  defaultPath?: string
}
export const pluginName = "extract-sfc-block" as const
export const GENERATED_TEXT = `/** This file is auto-generated by the [${pluginName}] plugin. /!\\ Do not modify it manually ! */ \n` as const

export const logger = createConsola({
  defaults: {
    message: `[${pluginName}]`
  },
  level: process.env.NODE_ENV === "production" ? 4 : 3
})

export function pascalCase(str: string) {
  return capitalize(camelize(str))
}

export function parseVueRequest(id: string) {
  return _parseVueRequest(id) as {
    filename: string
    query: Omit<VueQuery, "type"> & {
      name?: string
      type: VueQuery["type"] | string // This can be the PluginConfig.blockType
    }
  }
}

// For a [name].vue file, returns name
function extractVueFileName(str: string, dir: string) {
  return str.startsWith(dir) ? str.split(dir)[1].slice(0, -4) : null
}

function removeLeadingAndTrailingSlash(str: string) {
  const start = str.startsWith("/") ? 1 : 0
  const end = str.endsWith("/") ? -1 : undefined
  return str.slice(start, end)
}
export function getExtractionInfo(root: string, file: string, pluginOptions: PluginConfig, sfc: SFCBlock) {
  const { output, sourceDir, defaultPath } = pluginOptions
  const directoryPath = path.resolve(root, output)
  const sourceDirectory = `${root}/${sourceDir}/`
  const nameAndPath = typeof sfc.attrs.path === "string" ? removeLeadingAndTrailingSlash(sfc.attrs.path) : `${defaultPath ? `${defaultPath}/` : ""}${extractVueFileName(file, sourceDirectory)}`
  const outputPath = nameAndPath ? `${directoryPath}/${nameAndPath}.${sfc.lang ?? "ts"}` : null
  // console.log({ nameAndPath, sourceDirectory, file, directoryPath, outputPath })
  return {
    outputDirectory: outputPath ? path.dirname(outputPath) : null,
    outputPath
  }
}
