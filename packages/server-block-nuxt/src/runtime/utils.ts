import { promises as fsp } from "node:fs"

import { createConsola } from "consola"
import { type ProxifiedModule, generateCode } from "magicast"
import { transform } from "esbuild"

const GENERATED_TEXT = "/** This file is auto-generated by the [server-block-nuxt] module. /!\\ Do not modify it manually ! */ \n" as const

export const SupportedMethods = ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "CONNECT", "OPTIONS", "TRACE"] as const

export const logger = createConsola({
  defaults: {
    message: "[server-block-nuxt]"
  },
  level: process.env.NODE_ENV === "production" ? 4 : 3
})

export function getRoute(path: string) {
  // logger.info("Finding route ...")
  const routeRegex = /server\/\.generated(.*?)\.ts/
  const matches = routeRegex.exec(path)
  // logger.info("getRoute", path)
  const route = matches?.[1]
  if (!route) throw new Error(`Could not parse action route from ${path}`)
  return route
}

export function insertBeforeExtension(filePath: string, insertion: string) {
  // logger.info("Inserting", filePath, insertion)
  const lastDotIndex = filePath.lastIndexOf(".")
  return `${filePath.slice(0, lastDotIndex)}.${insertion}${filePath.slice(lastDotIndex)}`
}

export const makePathShortener = (source: string) => (path: string) => path.replace(source, "")

export async function writeHandlers(file: ProxifiedModule<any>, path: string) {
  // logger.info("Writing handlers ...", path)
  const writeMethodHandler = async (method: typeof SupportedMethods[number]) => {
    const destination = insertBeforeExtension(path, method.toLowerCase())
    file.exports.default = file.exports[method]
    delete file.exports[method] // @todo drop all other methods
    const { code } = generateCode(file)
    const shaked = await transform(code, { treeShaking: true, loader: "ts" }) // ...we clean it with esbuild ...
    await fsp.writeFile(destination, GENERATED_TEXT)
    await fsp.appendFile(destination, shaked.code)
    return { method: method.toLowerCase(), route: getRoute(path), handler: destination }
  }
  const handlers = []
  // @todo use Promise.all
  for (const method of SupportedMethods) {
    if (file.exports[method]) {
      const handler = await writeMethodHandler(method)
      handlers.push(handler)
    }
  }
  return handlers
}
